isErrorPage="false" : Ensures the particular jsp page can be used as an error page for another jsp page or not. 

import="package list" : The names of the packages available for the particular JSP page. 

language="scripting language" The scripting language to be used when compiling the JSP page. 

session="true": Used to specify the availability of session data for the particular JSP page. 



Include : 

Used to specify the names of the files to be inserted during the compilation of the JSP page. The contents of the files so included become part of the JSP page. 

<%@ include="file1.html" %>

_______________________________________________

Using JavaBeans in JSP

Developing JSP custom tags. 

JSP allows separation of the roles of web designer and programmers involved in developing web application by using JavaBeans.  A JavaBean is a reusable and a self-contained software component that take advantage of all the security and platform independent features of java. The programmer can create a javabean to access the database and develop data processing code in the bean, while the designer can design the user interface in the JSP page. JavaBean can be included in the JSP page to start processing user requests. 

To Use a JavaBean in your JSP page, you need to : 

1) Include the JavaBean reference in the JSP page. 
2) Set the JavaBean property
3) Get the JavaBean property


Include Bean Reference : 

<jsp:useBean> action tag that creates an instance of java bean. 

<jsp:useBean id="b1" scope="scopename" class="classname">

page : Specifies the JavaBean object is available for the current page only.  This is the default scope of a JavaBean. 

<jsp:useBean id="b1" scope="page" class="p1.hello">

request : Specifies that the javabean object is available for the current request. internally the bean reference gets added as an attribute to the request object. 

<jsp:useBean id="b2" scope="request" class="p1.hello">

session : Ensures that the javabean object is availble for the current session only. Internally the bean reference gets added as an attribute to the session object. 

<jsp:useBean id="b2" scope="session" class="p1.hello">

application : Specifies that the JavaBean object is available for the entire web app. Internally the bean reference gets added as an attribute to the ServletContext object. 

<jsp:useBean id="b2" scope="application" class="p1.hello">


Setting Bean Properties : 

<jsp:setProperty> : Enables you to set the properties of the JavaBean to specific values. 

<jsp:setProperty> this tag can be defined inside <jsp:useBean> tag or anywhere in the JSP file after the declaration of the <jsp:useBean> tag. 

<jsp:setProperty name="beanname" property="propertyName">

Read Bean Properties : 

You can use the <jsp:getProperty> action tag to read the value of a JavaBean property in your JSP page. 

<jsp:getProperty name="beanName" property="propertyName"/>

Implementing JavaBeans in JSP
_____________________________

While running the program pass the values as 

textbox1 -> 1 (any employ numer)
textbox2 -> jdbc:odbc:java (java is the data source)
textbox3 -> sun.jdbc.odbc.JdbcOdbcDriver 

__________________________________________________


1) Create the JavaBean
2) Create a JSP page
3) Create the user interface using HTML
4) Access the JSP application




JSP declarations : 

Used to define the page-level variables and methods. Declarative statements are placed within the <%! and %> tags only. 

<%!
int i=0;
int j=0;
String nam="souji";
%>

__________________________________________________

A tag is a reusable unit that is used in programs to perform repetitive tasks. JSP allows you to create custom tags that are similar to XML tags to avoid repetitive tasks in the JSP application. All JSP pages of your application can use this tag to display the message. Custom tags are packaged in a tag library. You can include the tag library in your JSP page to use the custom tags of the tag library. 

 Custom tags enables you to perform specific functions as 

 -> Accessing all implicit variables of a JSP page, such as request, response, in and out. 

 -> Modifying the resopnse generated by a calling JSP page. 
 
 -> Initializing and instantiating a JavaBean component. 

Various types of custom tags that you can develop in JSP are : 

1) Empty tag : Refers to the custom tags, that does not have any attribute or body. 

<td:welcome/>

2) tags with attributes : Refers to custom tags for which you can define attributes to customize the behavior of the custom tag. You can set the attribute value from the string variable or from a runtime expression with the request object. 
<td:welcome color="blue"></td:welcome> 

3) Tags with a body : Refers to the custom tag within which you can define nested custom tags, scripting elements, actions, HTML text, and JSP directives.

<td:welcome> 
<%=today_date%>
</td:welcome> 

4) Nested tags : Refers to the set of custom tags in whcih one custom tag encloes one or more custom tags. 

<td1:iftag condition "<%=eval>">
<td2:valueTrue>
  The expression evaluates to true.
</td2:valueTrue>
</td1:ifTag>

Creating a Custom tag : 

1) Develop a tag handler
2) Develop the Tag Library Descriptor (TLD) file.
3) Include the Tag Library in a JSP page. 
4) Deploy the application. 

1) Develop a Tag Handler  
  To develop a tag handler for an exmpty tag, you can extend the TagSupport class of the javax.servlet.jsp.tagext package. 

Tag interface defines the lifecycle methods of a custom tag. The base classes, such as TagSupport and BodyTagSupport provide a default implementation of these methods. 

doStartTag() -> This method is called when the container encounters the start tag of a custom tag. You can override this method in your tag handler to implement the functionality of your tag. This method returns the integer value as SKIP_BODY

public int doStartTag() throws JspException
{
   ....
   ...
   return SKIP_BODY;
}

doEndTag() -> This method is called when the container encounters the end tag of a custom tag. This method needs to return SKIP_PAGE. This indicates that the container should not process the remaining content of the JSP page. 

public int doEndTag() throws JspException
{
    return SKIP_PAGE;
}

2) Develop TLD File : 

It defines the custom tag in XML format, A TLD file stored with .tld extension provided information, such as library version, name of the tag, description of the tag, and the name of the tag handler that implements the tag. 

It contains a root element <taglib> within which variouis elements appear. 

<tlib-version> -> Defines the version of the tag library. 
<jsp:version> -> Defines the version of the JSP page that the tag library uses.
<short-name> -> Defines the short name of the tag library that referes to the tag library. 
<description> -> Describes the tag library, such as the type of tags contained in the tag library.
<uri> -> Defines the Unique id for the tag library. 
<tag> -> Contains the lements to define a custom tag. 

The <tag> contains 3 elements known as
<name>,<tag-class> and <body-content> 

