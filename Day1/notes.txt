Object Oriented Programming : It is an approach that provides a way of modularizing programming, that which can be used to create small partition memory area for both data and objects, which are to be used as templates for creating copies of such modules on demand. 

Object :

An object is a real world entity, that which possess 3 characterstics known as
	
	(i) State

	(ii) Behaviour

	(iii) Identity 

OOPS Features : 
________________

1) Encapsulation : Wrapping up of data and functions into a single unit known as encapsulation. 

2) Abstraction : Hiding the irrelevant details of an object, that do not contribute to its essential characterstics known as Abstraction. 

  *** Encapsulation focuses on showing the relevant details where, abstraction focuses on hiding the irrelevant details. ***

3) Inheritance : Deriving a new entity from already existing entity known as inheritance, through inheritance we can reduce the size of the program.

4) Polymorphism : The ability to take more than one form known as polymorphism. 

class : A class is a template or blueprint, that which contains combination of data members and member functions.  Members of the class can be accessable by using instance of the class. 

class class_name
{
   data members;
   member functions;
}

Why Java : 
__________

1) Platform Independence : Write Once and Run anywhere. 

2) Console/Windows/Web/Serivce Oriented/Mobile Apps : 

3) Packages 

__________________________________________________

Java Features : 
__________________


(i) Simple : Java uses simple C/C++ syntaxes, as programmer no need to take care of internal details like memory management etc...As how much memory allocated to run the program, the same amount of memory will be reallocated automatically. 

(ii) Object Oriented : Java supports all object oriented programming features. 

(iii) Compiled and Interpreted : Java programs are compiled first, during compilation java code will be converted into bytecode, then .class file will be created. In interpretation it reads the bytecode line by line and executes. 

(iv) Portable : Ability to run the program without changing the source code, java programs are programs that can run on any env. without changing the source code. 

(v) Securable : Java implements various levels of security as

	(i) Compiler Level

	(ii) Bytecode Level

	(iii) Class Loader Level

(vi) Distributed 

 By using java, we can make all distributed and robust applications. 

Java Architecture : 
___________________


	(i) Java Program : Java code that which stored with extension .java

	(ii) Java Class : Java code after compilation its converted into bytecode

	(iii) JVM (Java Virtual Machine) 

		(a) Class Loader : Used to load all classes which are required to 		run the program. There are 2 types of class loaders known as

			(i) Primordial Class Loader

			(ii) Class Loader Objects 


		(b) JIT Compiler : Converts bytecode into CPU specific format. 

		(c) Execution Manager : Contains QUEUE of programs which are ready to run where we can execute the program. 

	*** Before execution, needs to undergone security authentication ***

	(iv) Java API : It provides runtime env, that which allows you to run the java program. As there are 2 components as

		(a) JDK  (b) JRE


The default package in java is lang, as we can define as java.lang

The top level class in java is Object, as we can define as java.lang.Object

Data Types : 

There are various types of data types as

(i) Value Types : int, float, double, byte, char, boolean 

(ii) Reference Types : String, Object and Custom Objects

*** value types will be stored in STACK memory and reference types will be stored in HEAP memory ***

System.out.println() 

System ->  class

out ->  Console

println()  ->  method. 

System.out.println("Welcome to Java Programming...");

You can define method main() as 

public static void main(String[] args) {

}



main() method must be static as no class object supposed to call method main()


Access Modifiers : 
_____________________

1) private  : Allows you to access members within current class. 

2) public : Allows you to access members in entire application. 

3) protected : Allows you to access members within current/derived class. 

4) friendly : By default java possess friendly access modifier, allows you to access members within all classes of current package. 

You can create an object to the class, as

class_name obj = new class_name();

Control Structures : 
____________________

Used to define the flow of the program. 

There are 2 types of control structures known as 

(i) Branching

if...else : Executes the statement(s) based on the condition. 

if (condition) {
	statement(s);
} else {
	statement(s);
}

switch...case : Used to define menu-driven programs. 



(ii) Looping 

while loop : This loop executes all the statement(s) repeatedly until the condition remains true, if the condition remains false, then it comes out of the loop. 

For every loop, we have 3 phases as 

	(i) Initilization

	(ii) Condition

	(iii) Increment/Decrement 

Initilization performed at the beginning of the loop.

Condition performed at the conditional part of the loop.

Increment/Decrement performed before closing the loop. 

while(condition) {
   statement(s);
}


































