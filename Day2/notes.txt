Boxing and Unboxing : 

The concept of converting value types to reference type known as boxing, and refernce type to value type known as unboxing. 

Object is the type, that which can be used for boxing and unboxing. 

int x;

x="Hello";
x=12;
x=12.5;

Object x;

x="Hello";
x=12;
x=12.5

enum : used to store group of constarnt values, which can be used as user-defined data type. 

Method overloading : The concept of using the same method name w.r.t. different data types or different parameters known as method overloading.  Here, the method name must be same. 

class Test {
   int x, y;
   x=12;
   y=13;
}

Constructors : A constructor is a special member which used to initilize the member variables of the class, it is special because it has the same name as that of class name. 

Rules : 
_________

	(i) It will not contains any return type

	(ii) It will not return any value

	(iii) Constructors can be overloaded. 

Types of Constructors : 
________________________

There are 2 types of constructors 

	-> static constructors : These are called class constructors, which are used to initilize the static variables of the class, these constuctors are invoked automatically before control reaches the entry point. These constructors cannot be overloaded. (*** In java, we don't have static constructors, as static {} acts as static constructor ***) 

	-> Instance constructors : These are the constructors that which are invoked automatically once the instance of the class created. These constructors can be overloaded. 

static variables : These are the class variables, that which retains values irrespective of type of object. 

Inheritance : The concept of deriving a new class from already existing class known as inheritance, the class which derived known as derived class, the class from which its derived known as base class. Through inheritance, we can reduce the size of the program. 

class First {
...
...
...
}

class Second extends First {
...
...
...
}

Once you create an object to Second class, then you can access all public/protected and friendly members of base class. 

super keyword : If you want to pass values from derived class to base class, then we need the help of super keyword. It has 2 forms as

1) super as a keyword

2) super as a constructor

Abstract Class : 
________________

A class, that which can be created, but not implemented and instantiated known as abstract class. Abstract class contains abstract and non-abstract methods, abstract methods needs to be overrided mandetorily by the derived class. 

abstract class class_name {
    abstract method1();
    abstract method2();
}

interfaces : 
_____________

Java does not support the concept of multiple inheritance, to achieve this we need the help of interfaces. 

An interface contains method declaration, and the implementation can be done in the corresponding class, you can add more than one interface to the particular class. 

Difference between interface and Abstract Class : 
__________________________________________________

   -> An abstract class contains both abstract and non-abstract
		methods, where interface contains only
		abstract methods. 

   -> Interface methods are public and abstract by default.

   -> Multiple Inheritance can be achieved by using interfaces

   -> An interface can be called from anywhere to anywhere. 

interface interface_name {
   method1();
   method2();
}

interface can be added to the class by using implements keyword. 

interface IOne {
  void show();
}

interface ITwo {
  void show();
}

interface IThree {
  void show();
}

class Hello implements IOne, ITwo, IThree {

}

final class : 

Final class cannot be inherited

Final methods cannot be overrided

Final variables cannot be updated. 


























